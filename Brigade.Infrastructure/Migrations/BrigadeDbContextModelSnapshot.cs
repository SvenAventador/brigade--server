// <auto-generated />
using System;
using Brigade.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Brigade.Infrastructure.Migrations
{
    [DbContext(typeof(BrigadeDbContext))]
    partial class BrigadeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_application_status_enum", "order_application_status", new[] { "pending", "accepted", "rejected", "cancelled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status_enum", "order_status", new[] { "open", "assigned", "in_progress", "completed", "cancelled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "preferences_contact_method_enum", "preferences_contact_method", new[] { "telegram", "whats_app", "phone", "email" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_type_enum", "role_type", new[] { "customer", "company", "performer" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "support_status_enum", "support_status", new[] { "open", "in_progress", "resolved", "clodes", "pending_user_response" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "tariff_status_enum", "tariff_status", new[] { "active", "inactive", "expired", "cancelled", "pending_payment" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Brigade.Domain.Entities.Chats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("FirstParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("FirstParticipantId");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("OrderId");

                    b.Property<Guid>("SecondParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("SecondParticipantId");

                    b.HasKey("Id");

                    b.HasIndex("FirstParticipantId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SecondParticipantId");

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.CompanyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyProfiles", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Messages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("ChatId");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("IsRead");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SendAt");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("SenderId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.OrderApplication", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PerformerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("order_application_status_enum")
                        .HasColumnName("Status");

                    b.HasKey("OrderId", "PerformerId");

                    b.HasIndex("PerformerId");

                    b.ToTable("OrderApplications", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Orders", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("CustomerId");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("Price");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("RegionId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("order_status_enum")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegionId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Regions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.HasKey("Id");

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Reviews", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("AuthorId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Comment");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("OrderId");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid")
                        .HasColumnName("TargetId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TargetId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("Type")
                        .HasColumnType("role_type_enum")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.SupportTickets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("support_status_enum")
                        .HasColumnName("Status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Tariffs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer")
                        .HasColumnName("DurationDays");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("Price");

                    b.HasKey("Id");

                    b.ToTable("Tariffs", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("EmailConfirmationToken")
                        .HasColumnType("uuid")
                        .HasColumnName("EmailConfirmationToken");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("HashPassword");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("IsConfirmed");

                    b.Property<DateTime>("LastEnter")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastEnter");

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT")
                        .HasColumnName("Photo");

                    b.Property<string>("PreferencesContact")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PreferedContact");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("RegionId");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RegistrationDate");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpiresAt");

                    b.Property<bool>("IsExpires")
                        .HasColumnType("boolean")
                        .HasColumnName("IsExpires");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("IsRevoked");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RefreshToken");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RevokedAt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoleId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.UserTariffs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("Amount");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("tariff_status_enum")
                        .HasColumnName("Status");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid")
                        .HasColumnName("TariffId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTariffs", (string)null);
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Chats", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.User", "FirstParticipant")
                        .WithMany()
                        .HasForeignKey("FirstParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brigade.Domain.Entities.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Brigade.Domain.Entities.User", "SecondParticipant")
                        .WithMany()
                        .HasForeignKey("SecondParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstParticipant");

                    b.Navigation("Orders");

                    b.Navigation("SecondParticipant");
                });

            modelBuilder.Entity("Brigade.Domain.Entities.CompanyProfile", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Brigade.Domain.ValueObjects.Name", "LegalName", b1 =>
                        {
                            b1.Property<Guid>("CompanyProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("LegalName");

                            b1.HasKey("CompanyProfileId");

                            b1.ToTable("CompanyProfiles");

                            b1.WithOwner()
                                .HasForeignKey("CompanyProfileId");
                        });

                    b.OwnsOne("Brigade.Domain.ValueObjects.INN", "INN", b1 =>
                        {
                            b1.Property<Guid>("CompanyProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character(11)")
                                .HasColumnName("INN")
                                .IsFixedLength();

                            b1.HasKey("CompanyProfileId");

                            b1.ToTable("CompanyProfiles");

                            b1.WithOwner()
                                .HasForeignKey("CompanyProfileId");
                        });

                    b.Navigation("INN")
                        .IsRequired();

                    b.Navigation("LegalName")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Messages", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.Chats", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brigade.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Brigade.Domain.Entities.OrderApplication", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.Orders", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brigade.Domain.Entities.User", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Performer");
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Orders", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brigade.Domain.Entities.Regions", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Brigade.Domain.ValueObjects.Name", "Title", b1 =>
                        {
                            b1.Property<Guid>("OrdersId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Title");

                            b1.HasKey("OrdersId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrdersId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("Region");

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Regions", b =>
                {
                    b.OwnsOne("Brigade.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("RegionsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Name");

                            b1.HasKey("RegionsId");

                            b1.ToTable("Regions");

                            b1.WithOwner()
                                .HasForeignKey("RegionsId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Reviews", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brigade.Domain.Entities.Orders", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brigade.Domain.Entities.User", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Brigade.Domain.ValueObjects.Rating", "Rating", b1 =>
                        {
                            b1.Property<Guid>("ReviewsId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Rating");

                            b1.HasKey("ReviewsId");

                            b1.ToTable("Reviews");

                            b1.WithOwner()
                                .HasForeignKey("ReviewsId");
                        });

                    b.Navigation("Author");

                    b.Navigation("Order");

                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Brigade.Domain.Entities.SupportTickets", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Brigade.Domain.ValueObjects.Name", "Subject", b1 =>
                        {
                            b1.Property<Guid>("SupportTicketsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Subject");

                            b1.HasKey("SupportTicketsId");

                            b1.ToTable("SupportTickets");

                            b1.WithOwner()
                                .HasForeignKey("SupportTicketsId");
                        });

                    b.Navigation("Subject")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Brigade.Domain.Entities.Tariffs", b =>
                {
                    b.OwnsOne("Brigade.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("TariffsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Name");

                            b1.HasKey("TariffsId");

                            b1.ToTable("Tariffs");

                            b1.WithOwner()
                                .HasForeignKey("TariffsId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Brigade.Domain.Entities.User", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.Regions", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Brigade.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Brigade.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("FullName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Brigade.Domain.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(18)
                                .HasColumnType("character varying(18)")
                                .HasColumnName("Phone");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Brigade.Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Brigade.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brigade.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Brigade.Domain.Entities.UserTariffs", b =>
                {
                    b.HasOne("Brigade.Domain.Entities.Tariffs", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Brigade.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Brigade.Domain.ValueObjects.ValidityPeriod", "ValidityPeriod", b1 =>
                        {
                            b1.Property<Guid>("UserTariffsId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("StartDate");

                            b1.HasKey("UserTariffsId");

                            b1.ToTable("UserTariffs");

                            b1.WithOwner()
                                .HasForeignKey("UserTariffsId");
                        });

                    b.Navigation("Tariff");

                    b.Navigation("User");

                    b.Navigation("ValidityPeriod")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
